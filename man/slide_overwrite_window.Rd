% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide_overwrite_window.R
\name{slide_overwrite_window}
\alias{slide_overwrite_window}
\alias{slide_overwrite_window_lgl}
\alias{slide_overwrite_window_chr}
\alias{slide_overwrite_window_int}
\alias{slide_overwrite_window_dbl}
\alias{slide_overwrite_window_raw}
\title{Apply a function to a sliding window of a vector}
\usage{
slide_overwrite_window(.x, .f, .n, .align = "right",
  .fill = list(NULL), ...)

slide_overwrite_window_lgl(.x, .f, .n, .align = "right", .fill = NA,
  ...)

slide_overwrite_window_chr(.x, .f, .n, .align = "right", .fill = NA,
  ...)

slide_overwrite_window_int(.x, .f, .n, .align = "right", .fill = NA,
  ...)

slide_overwrite_window_dbl(.x, .f, .n, .align = "right", .fill = NA,
  ...)

slide_overwrite_window_raw(.x, .f, .n, .align = "right",
  .fill = as.raw(0), ...)
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{.n}{A positive integer; the length of the sliding window. Needs to be
an odd number for centered alignment.}

\item{.align}{One of \code{"left"} (the default), \code{"center"} or \code{"right"};
Assign the result of function calls to the position at the left, center
or right of the sliding window. Ignored if \code{fill = NULL}.}

\item{.fill}{length-one vector or \code{NULL}; value assigned to the result where
the sliding window exceeds the first or last element of \code{.x}. \code{NULL} means
no filling.}

\item{...}{Additional arguments passed on to the mapped function.}
}
\description{
\code{slide_overwrite_window} is an alternative implementation of \code{slide} that
allocates a vector for the rolling window only once and overwrites its values
in each iteration.

This leads to an unexpected behaviour in (the unusual) case the
vector passed to .f is assigned during the call. For example:
\code{slide_overwrite_window(1:3, identity, 2)} returns \code{list(NULL, 2:3, 2:3)}
instead of \code{list(NULL, 1:2, 2:3)}.

Reference counting would allow to detect whether the vector is referenced
after calling .f and allocate a new vector in this case.
However, while proposed in 2014, reference counting for R is not implemented
(yet). See notes on reference counting by Luke Tierney:
\url{https://developer.r-project.org/Refcnt.html}.
}
\examples{
# different than expected return value: list(NULL, 1:2, 2:3)
slide_overwrite_window(1:3, identity, 2)

a <- list()
slide_overwrite_window_dbl(1:3, function(x) {a <<- c(a, list(x)); sum(x)}, 2)
str(a)
# differs from expected return value: list(NULL, 1:2, 2:3)
}
\seealso{
Other roll variants: \code{\link{slide}}
}
\concept{roll variants}
